install.packages("BiocManager")
BiocManager::install("WGCNA")
load("~/Desktop/Research/MLNN/UCLA_gene_expression/DataExpression-01-dataInput.RData")
install.packages("gert", type = "source")
install.packages("usethis")
install.packages("gitcreds")
usethis::create_github_token()
gitcreds::gitcreds_set()
library(tidyverse)
library(sf)
install.packages("sf")
library(tidyverse)
library(sf)
library(tidyverse)
library(sf)
setwd("~/Desktop/gsd-ses5394-harvard/T1")
library(tidyverse)
library(sf)
install.packages("sf")
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
install.packages("leaflet")
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
install.packages("maptiles")
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
install.packages("tidyterra")
install.packages("tidyterra")
install.packages("terra")
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
install.packages("tidyterra")
install.packages("tidyterra")
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
install.packages("tidyterra")
install.packages("tidyterra")
library(tidyterra)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyterra)
install.packages("tidyterra")
install.packages("tidyterra", dependencies = TRUE)
library(tidyterra)
install.packages("terra", type = "source")
library(tidyterra)
install.packages("tidyterra", type = "binary")
library(tidyterra)
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
library(knitr)
library(tigris)
install.packages("tigris")
library(tidyverse)
library(sf)
library(DBI)
library(here)
library(leaflet)
library(maptiles)
library(tidyterra)
library(knitr)
library(tigris)
sf::sf_use_s2(FALSE)
TAZs <- here("model",
"inputs",
"zonal",
"shp",
"CTPS_TDM23_TAZ_2017g_v202303.shp") |>
st_read(quiet = TRUE) |>
st_transform("WGS84")
TAZs <- here("model",
"inputs",
"zonal",
"shp",
"CTPS_TDM23_TAZ_2017g_v202303.shp") |>
st_read(quiet = TRUE) |>
st_transform("WGS84")
base_map <- get_tiles(TAZs,
provider = "CartoDB.Positron",
zoom = 8,
crop = TRUE)
ggplot(TAZs) +
geom_spatraster_rgb(data = base_map) +
geom_sf(fill = NA,
color = "orange") +
theme_void()
somermed_TAZs <- TAZs |>
filter(town %in% c("CAMBRIDGE"))
leaflet(somermed_TAZs) |>
addProviderTiles(provider = "CartoDB.Positron") |>
addPolygons(weight = 2,
color = "orange",
fillColor = "orange",
fillOpacity = 0.1,
highlightOptions = highlightOptions(weight = 3,
fillOpacity = 0.5),
label = somermed_TAZs$taz_id)
somermed_blocks <- blocks(state = "MA",
county = "Suffolk",
year = 2010,
progress_bar = FALSE) |>
st_transform("WGS84")
leaflet(somermed_blocks) |>
addProviderTiles(provider = "CartoDB.Positron") |>
addPolygons(weight = 2,
color = "forestgreen",
fillColor = "forestgreen",
fillOpacity = 0.1,
highlightOptions = highlightOptions(weight = 3,
fillOpacity = 0.5),
label = somermed_blocks$GEOID10)
MA_pop <- here("model",
"inputs",
"zonal",
"ma_population_run97-176_2019_v20240109.csv") |>
read_csv(show_col_types = FALSE) |>
mutate(block_id = as.character(block_id))
head(MA_pop, n = 10) |>
kable()
RINH_pop <- here("model",
"inputs",
"zonal",
"nhri_population_2020_v20230518.csv") |>
read_csv(show_col_types = FALSE)
head(RINH_pop, n = 10) |>
kable()
MA_emp <- here("model",
"inputs",
"zonal",
"ma_employment_run97-176_2019_v20240109.csv") |>
read_csv(show_col_types = FALSE) |>
mutate(block_id = as.character(block_id))
head(MA_emp, n = 10) |>
kable()
RINH_emp <- here("model",
"inputs",
"zonal",
"nhri_employment_2020_v20230518.csv") |>
read_csv(show_col_types = FALSE) |>
mutate(block_id = as.character(block_id)) |>
filter(str_length(block_id) < 10)
head(RINH_emp, n = 10) |>
kable()
here("T1",
"gifs",
"open-hwy.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"hwy-dataview.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"open-transit.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"transit-dataview.gif") |>
knitr::include_graphics()
target_block_pop <- MA_pop |>
filter(block_id == "250250001001001")
tibble(people = nrow(target_block_pop),
households = length(unique(target_block_pop$hid))) |>
kable()
gen_pop <- function(block_id, hh_number) {
tibble(
hid = paste0("new", seq(1, hh_number, by=1)),
block_id = block_id,
hh_inc = rpois(n = hh_number, lambda = 30000),
persons_seed = runif(n = hh_number),
age = round(rnorm(n = hh_number, mean = 50, sd = 10)),
workers = 1,
is_worker = 1,
person_num = 1,
is_child = FALSE
) |>
mutate(
persons = case_when(
persons_seed < 0.5 ~ 2,
persons_seed < 0.83 ~ 1,
TRUE ~ 3
),
age = ifelse(age < 18, 18, age),
wage_inc = hh_inc
) |>
select(-persons_seed)
}
# Example usage
new_pop_11 <- gen_pop("250173531021004", 300) #mitfields
new_pop_12 <- gen_pop("250173531022011",300) #mitcore
new_pop_13 <- gen_pop("250173537003005",300) #hvdyard
new_pop_14 <- gen_pop("250173536005005",300) #hvdsci
new_pop_15 <- gen_pop("250250001001001",300) #hvdfields
add_second_person <- function(new_pop_1) {
new_pop_2 <- new_pop_1 |>
filter(persons > 1) |>
select(hid, block_id, hh_inc, persons, workers) |>
mutate(
person_num = 2,
is_worker = 0,
wage_inc = 0,
child_seed = runif(n = n()),
is_child = child_seed < 0.5
) |>
select(-child_seed)
# Separate children and adults
new_pop_2_kids <- new_pop_2 |>
filter(is_child) |>
mutate(age = round(rnorm(n = n()))) |>
mutate(age = case_when(age < 0 ~ 0, age > 17 ~ 17, TRUE ~ age))
new_pop_2_adult <- new_pop_2 |>
filter(!is_child) |>
mutate(age = round(rnorm(n = n()))) |>
mutate(age = ifelse(age < 18, 18, age))
# Combine both groups
new_pop_2 <- bind_rows(new_pop_2_adult, new_pop_2_kids)
return(new_pop_2)
}
# Example usage
new_pop_21 <- add_second_person(new_pop_mitfields)
add_second_person <- function(new_pop_1) {
new_pop_2 <- new_pop_1 |>
filter(persons > 1) |>
select(hid, block_id, hh_inc, persons, workers) |>
mutate(
person_num = 2,
is_worker = 0,
wage_inc = 0,
child_seed = runif(n = n()),
is_child = child_seed < 0.5
) |>
select(-child_seed)
# Separate children and adults
new_pop_2_kids <- new_pop_2 |>
filter(is_child) |>
mutate(age = round(rnorm(n = n()))) |>
mutate(age = case_when(age < 0 ~ 0, age > 17 ~ 17, TRUE ~ age))
new_pop_2_adult <- new_pop_2 |>
filter(!is_child) |>
mutate(age = round(rnorm(n = n()))) |>
mutate(age = ifelse(age < 18, 18, age))
# Combine both groups
new_pop_2 <- bind_rows(new_pop_2_adult, new_pop_2_kids)
return(new_pop_2)
}
# Example usage
new_pop_21 <- add_second_person(new_pop_11)
new_pop_22 <- add_second_person(new_pop_12)
new_pop_23 <- add_second_person(new_pop_13)
new_pop_24 <- add_second_person(new_pop_14)
new_pop_25 <- add_second_person(new_pop_15)
add_third_person <- function(new_pop_1) {
new_pop_3 <- new_pop_1 |>
filter(persons > 2) |>
select(hid, block_id, hh_inc, persons, workers) |>
mutate(
person_num = 3,
is_worker = 0,
wage_inc = 0,
child_seed = runif(n = n()),
is_child = child_seed < 0.5
) |>
select(-child_seed)
# Separate children and adults
new_pop_3_kids <- new_pop_3 |>
filter(is_child) |>
mutate(age = round(rnorm(n = n()))) |>
mutate(age = case_when(age < 0 ~ 0, age > 17 ~ 17, TRUE ~ age))
new_pop_3_adult <- new_pop_3 |>
filter(!is_child) |>
mutate(age = round(rnorm(n = n()))) |>
mutate(age = ifelse(age < 18, 18, age))
# Combine both groups
new_pop_3 <- bind_rows(new_pop_3_adult, new_pop_3_kids)
return(new_pop_3)
}
# Example usage
new_pop_31 <- add_third_person(new_pop_11)
new_pop_32 <- add_third_person(new_pop_12)
new_pop_33 <- add_third_person(new_pop_13)
new_pop_34 <- add_third_person(new_pop_14)
new_pop_35 <- add_third_person(new_pop_15)
combine_population <- function(new_pop_1, new_pop_2, new_pop_3) {
new_pop <- bind_rows(new_pop_1, new_pop_2, new_pop_3) |>
group_by(hid) |>
mutate(children = sum(is_child)) |>
select(-is_child) |>
arrange(hid, person_num) |>
ungroup()
return(new_pop)
}
# Example usage
new_pop_mitfields <- combine_population(new_pop_11, new_pop_21, new_pop_31)
new_pop_mitcore <- combine_population(new_pop_12, new_pop_22, new_pop_32)
new_pop_hvdyard <- combine_population(new_pop_13, new_pop_23, new_pop_33)
new_pop_hvdsci <- combine_population(new_pop_14, new_pop_24, new_pop_34)
new_pop_hvdfields <- combine_population(new_pop_15, new_pop_25, new_pop_35)
# List of new population datasets
new_pops <- list(new_pop_mitfields, new_pop_mitcore, new_pop_hvdyard, new_pop_hvdsci, new_pop_hvdfields)
# Combine all populations
MA_pop_updated <- bind_rows(MA_pop, new_pops)
# Write to CSV
write_csv(MA_pop_updated, here("model", "inputs", "zonal", "ma_pop_no_unis.csv"))
MA_emp |>
filter(block_id == "250173501031013") |>
t() |>
kable()
new_emp <- tibble(block_id = "250173501031013",
`1_constr` = 0,
`2_eduhlth` = 0,
`3_finance` = 0,
`4_public` = 0,
`5_info` = 0,
`6_ret_leis` = 0,
`7_manu` = 0,
`8_other` = 0,
`9_profbus` = 0,
`10_ttu` = 0,
total_jobs = 0,
total_households = 356)
MA_emp |>
filter(block_id != "250173501031013") |>
rbind(new_emp) |>
write_csv(here("model",
"inputs",
"zonal",
"ma_emp_less.csv"))
here("T1",
"gifs",
"copy-paste.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"basemap.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"delete-links.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"transit-open-edit.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"delete-transit.gif") |>
knitr::include_graphics()
here("T1",
"gifs",
"start-run.gif") |>
knitr::include_graphics()
base_db <- dbConnect(drv=RSQLite::SQLite(),
dbname=here("model",
"outputs",
"Base",
"tdm23.db"))
install.packages("RSQLite")
install.packages("RSQLite")
base_db <- dbConnect(drv=RSQLite::SQLite(),
dbname=here("model",
"outputs",
"Base",
"tdm23.db"))
